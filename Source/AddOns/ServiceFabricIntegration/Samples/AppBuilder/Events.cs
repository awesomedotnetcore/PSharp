using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Microsoft.PSharp;
using Microsoft.PSharp.ReliableServices;
using Microsoft.PSharp.ReliableServices.Utilities;
using Microsoft.ServiceFabric.Data;
using Microsoft.ServiceFabric.Data.Collections;
using System.Runtime.Serialization;

namespace AppBuilder
{
	#region machine initialization

	/// <summary>
	/// Initialize the storage blob with a handle back to AppBuilder.
	/// </summary>
	[DataContract]
	class StorageBlobInitEvent : Event
	{
		[DataMember]
		public MachineId blockchain;

		public StorageBlobInitEvent(MachineId blockchain)
		{
			this.blockchain = blockchain;
		}
	}

	/// <summary>
	/// Initialize the sql database machine with a handle back to AppBuilder.
	/// </summary>
	[DataContract]
	class SQLDatabaseInitEvent : Event
	{
		[DataMember]
		public MachineId appBuilderMachine;

		public SQLDatabaseInitEvent(MachineId appBuilderMachine)
		{
			this.appBuilderMachine = appBuilderMachine;
		}
	}

	[DataContract]
	class UserInitEvent : Event
	{
		[DataMember]
		public MachineId AppBuilderMachine;

		public UserInitEvent(MachineId AppBuilderMachine)
		{
			this.AppBuilderMachine = AppBuilderMachine;
		}
	}

	#endregion

	#region user registration 

	/// <summary>
	/// Issued by user to register himself/herself with AppBuilder.
	/// </summary>
	[DataContract]
	class UserRegisterEvent : Event
	{
		[DataMember]
		public MachineId user;

		public UserRegisterEvent(MachineId user)
		{
			this.user = user;
		}
	}

	/// <summary>
	/// AppBuilder sends back the public key of new user on successful registration.
	/// </summary>
	[DataContract]
	class UserRegisterResponseEvent : Event
	{
		[DataMember]
		public int id;

		public UserRegisterResponseEvent(int id)
		{
			this.id = id;
		}
	}

	#endregion

	#region transaction

	/// <summary>
	/// Raise a request to transfer ether from one registered account to another
	/// </summary>
	[DataContract]
	class TransferEvent : Event
	{
		/// <summary>
		/// ID of account initiating transfer
		/// </summary>
		[DataMember]
		public int from;

		/// <summary>
		/// ID to which transfer is to be made
		/// </summary>
		[DataMember]
		public int to;

		/// <summary>
		/// Amount of ether to be transferred
		/// </summary>
		[DataMember]
		public int amount;

		public TransferEvent(int from, int to, int amount)
		{
			this.to = to;
			this.from = from;
			this.amount = amount;
		}
	}

	/// <summary>
	/// AppBuilder returns the unique transaction id of the new transaction to the user.
	/// </summary>
	[DataContract]
	class TxIdEvent : Event
	{
		[DataMember]
		public int txid;

		public TxIdEvent(int txid)
		{
			this.txid = txid;
		}
	}

	/// <summary>
	/// Used by AppBuilder to start the appropriate function (transfer) in Storage Blob.
	/// </summary>
	[DataContract]
	class StorageBlobTransferEvent : Event
	{
		/// <summary>
		/// Transaction id, generated by AppBuilder, for this tx.
		/// </summary>
		[DataMember]
		public int txid;

		/// <summary>
		/// Account from which ether is to be transferred.
		/// </summary>
		[DataMember]
		public int from;

		/// <summary>
		/// Account to which ether is to be transferred.
		/// </summary>
		[DataMember]
		public int to;

		/// <summary>
		/// Amount of ether to transfer.
		/// </summary>
		[DataMember]
		public int amount;

		public StorageBlobTransferEvent(int txid, int from, int to, int amount)
		{
			this.txid = txid;
			this.from = from;
			this.to = to;
			this.amount = amount;
		}
	}

	#endregion

	#region database

	class UpdateTxStatusDBEvent : Event
	{
		/// <summary>
		/// Transaction id
		/// </summary>
		public int txid;

		/// <summary>
		/// Status of transaction
		/// </summary>
		public string status;

		public UpdateTxStatusDBEvent(int txid, string status)
		{
			this.txid = txid;
			this.status = status;
		}

	}
	
	/// <summary>
	/// Request for the current status of a transaction.
	/// </summary>
	[DataContract]
	class GetTxStatusDBEvent : Event
	{
		[DataMember]
		public int txid;

		[DataMember]
		public MachineId requestFrom;

		public GetTxStatusDBEvent(int txid, MachineId requestFrom)
		{
			this.txid = txid;
			this.requestFrom = requestFrom;
		}
	}

	/// <summary>
	/// Returns the current status of a transaction.
	/// </summary>
	[DataContract]
	class TxDBStatus : Event
	{
		/// <summary>
		/// Transaction id.
		/// </summary>
		[DataMember]
		public int txid;

		/// <summary>
		/// Status of requested transaction
		/// </summary>
		[DataMember]
		public string txStatus;

		/// <summary>
		/// MachineId of user requesting status.
		/// </summary>
		[DataMember]
		public MachineId requestFrom;

		public TxDBStatus(int txid, string txStatus, MachineId requestFrom)
		{
			this.txid = txid;
			this.txStatus = txStatus;
			this.requestFrom = requestFrom;
		}
	}
	#endregion

	#region additional classes
	
	/// <summary>
	/// Holds transaction objects in the uncommitted queue of the blockchain.
	/// </summary>
	[DataContract]
	class TxObject
	{
		/// <summary>
		/// txid 
		/// </summary>
		public int txid;
		
		/// <summary>
		/// account from which ether is to be transferred.
		/// </summary>
		public int from;

		/// <summary>
		/// account to which ether is to be transferred.
		/// </summary>
		public int to;

		/// <summary>
		/// amount of ether to transfer
		/// </summary>
		public int amount;

		public TxObject(int txid, int to, int from, int amount)
		{
			this.txid = txid;
			this.to = to;
			this.from = from;
			this.amount = amount;
		}
	}

	/// <summary>
	/// Represents a set of transactions committed to a block in the blockchain.
	/// </summary>
	[DataContract]
	class TxBlock
	{
		/// <summary>
		/// Number of transactions in this block
		/// </summary>
		[DataMember]
		public int numTx;

		/// <summary>
		/// Set of committed transactions
		/// </summary>
		[DataMember]
		public HashSet<TxObject> transactions;

		public TxBlock()
		{
			numTx = 0;
			transactions = new HashSet<TxObject>();
		}
	}

	#endregion
}
